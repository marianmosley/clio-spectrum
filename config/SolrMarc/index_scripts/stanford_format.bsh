import java.io.*;
import java.text.ParseException;
import java.util.*;
import java.util.regex.Pattern;

import org.marc4j.marc.*;
import org.solrmarc.tools.Utils;  


protected static Set getSubfieldDataAsSet(Record record, String fldTag, String subfldsStr, String separator)
{
  Set resultSet = new LinkedHashSet();

  // Process Leader
  if (fldTag.equals("000"))
  {
    resultSet.add(record.getLeader().toString());
    return resultSet;
  }

  // Loop through Data and Control Fields
  int iTag = new Integer(fldTag).intValue();
  List varFlds = record.getVariableFields(fldTag);
  for (VariableField vf : varFlds)
  {
    if (iTag > 9 && subfldsStr != null) 
    {
      // DataField
      DataField dfield = (DataField) vf;

      if (subfldsStr.length() > 1 || separator != null) 
      {
        // Allow automatic concatenation of grouped subfields
        StringBuffer buffer = new StringBuffer("");
        List subFlds = dfield.getSubfields();
        for (Subfield sf : subFlds) 
        {
          String subfldsStrLC = subfldsStr.toLowerCase();
          int index = subfldsStrLC.indexOf(sf.getCode());
          if (index != -1)
          {
            if (buffer.length() > 0)  
            {
              if (Character.isUpperCase(subfldsStr.charAt(index)))
              {
                resultSet.add(buffer.toString());
                buffer = new StringBuffer("");
              }
              else 
              {
                buffer.append(separator != null ? separator : " ");
              }
            }
            buffer.append(sf.getData().trim());
          }
        }                        
        if (buffer.length() > 0) 
          resultSet.add(buffer.toString());
      } 
      else 
      {
        // get all instances of the single subfield
        List subFlds = dfield.getSubfields(subfldsStr.charAt(0));
        for (Subfield sf : subFlds)                         
        {
          resultSet.add(sf.getData().trim());
        }
      }
    }
    else 
    {
      // Control Field
      resultSet.add(((ControlField) vf).getData().trim());
    }
  }
  return resultSet;
} 


Set getFormats(Record record)
{
  LinkedHashSet resultSet = new LinkedHashSet();
  // As of July 28, 2008, algorithms for formats are currently in email 
  // message from Vitus Tang to Naomi Dushay, cc Phil Schreur, Margaret 
  // Hughes, and Jennifer Vine dated July 23, 2008.

  // Note: MARC21 documentation refers to char numbers that are 0 based,
  //  just like java string indexes, so char "06" is at index 6, and is
  //  the seventh character of the field

  // assign formats based on leader chars 06, 07 and chars in 008
  String leaderStr = record.getLeader().toString();
  char leaderChar07 = leaderStr.charAt(7);
  VariableField f008 = record.getVariableField("008");
  char leaderChar06 = leaderStr.charAt(6);
  switch (leaderChar06) {
    case 'a':
      if (leaderChar07 == 'a' || leaderChar07 == 'm') 
        resultSet.add("Book");
      break;
    case 'b':
    case 'p':
      resultSet.add("Manuscript/Archive");
      break;
    case 'c':
    case 'd':
      resultSet.add("Music - Score");
      break;
    case 'e':
    case 'f':
      resultSet.add("Map/Globe");
      break;
    case 'g':
      // look for m or v in 008 field, char 33 (count starts at 0)
      if (f008 != null && f008.find("^.{33}[mv]")) 
        resultSet.add("Video");
      break;
    case 'i':
      resultSet.add("Sound Recording");
      break;
    case 'j':
      resultSet.add("Music - Recording");
      break;
    case 'k': 
      // look for i, k, p, s or t in 008 field, char 33 (count starts at 0)
      if (f008 != null && f008.find("^.{33}[ikpst]")) 
        resultSet.add("Image");
      break;
    case 'm':
      // look for a in 008 field, char 26 (count starts at 0)
      if (f008 != null && f008.find("^.*{26}a")) 
        resultSet.add("Computer File");
      break;
    case 'o':  // instructional kit
      resultSet.add("Other");
      break;
    case 'r':  // object
      resultSet.add("Other");
      break;
    case 't': 
      if (leaderChar07 == 'a' || leaderChar07 == 'm') 
        resultSet.add("Book");
      break;
  } // end switch

  if ( resultSet.isEmpty() || resultSet.size() == 0 ) {
    // look for serial publications - leader/07 s
    if (leaderChar07 == 's') {
      if (f008 != null) {
        char c21 = ((ControlField) f008).getData().charAt(21);
        switch (c21) {
          case 'd':   // updating database (ignore)
            break;
          case 'l':   // updating looseleaf (ignore)
            break;
          case 'm':   // monographic series
            resultSet.add("Book");
            break;
          case 'n':
            resultSet.add("Newspaper");
            // NEXT-713 - have "Journal" searches retreive newspapers
            resultSet.add("Journal/Periodical");
            break;
          case 'p':
            // b4 2008-12-02 was: resultSet.add("Journal");
            resultSet.add("Journal/Periodical");
            break;
          case 'w':   // web site
            break;
          case ' ':  // blank for other serial records (include with journals and periodicals)
          	resultSet.add("Journal/Periodical");
          	break;
          case '|':  // vertical bar for brief serial records
            resultSet.add("Journal/Periodical");
            break;
        }
      }
    }
  }

  // look for serial publications 006/00 s
  if ( resultSet.isEmpty() || resultSet.size() == 0 ) {
    VariableField f006 = record.getVariableField("006");
    if (f006 != null && f006.find("^[s]") ) {
      char c04 = ((ControlField) f006).getData().charAt(4);
      switch (c04) {
        case 'd':   // updating database (ignore)
          break;
        case 'l':   // updating looseleaf (ignore)
          break;
        case 'm':   // monographic series
          resultSet.add("Book");
          break;
        case 'n':
          resultSet.add("Newspaper");
          // NEXT-713 - have "Journal" searches retreive newspapers
          resultSet.add("Journal/Periodical");
          break;
        case 'p':
          resultSet.add("Journal/Periodical");
          break;
        case 'w':   // web site
          break;
        case ' ':
          resultSet.add("Journal/Periodical");
          break;
        case '|':
          resultSet.add("Journal/Periodical");
          break;
      }
    }
  }

  Set values007 = indexer.getFieldList(record,"007");

  for (String value007 : values007) {
	// remote electronic resources
    if (value007.charAt(0) == 'c' && value007.charAt(1) == 'r') {
      resultSet.add("Online");
    }
  } 

  // look for conference proceedings in 6xx
  List dfList = record.getDataFields();
  for (DataField df:dfList) {
    if (df.getTag().startsWith("6")) {
      List subList = Utils.getSubfieldStrings(df, 'x');
      subList.addAll(Utils.getSubfieldStrings(df, 'v'));
      for (String s : subList) {
        if (s.toLowerCase().contains("congresses")) {
          resultSet.remove("Journal/Periodical");
          resultSet.add("Conference Proceedings");
        }
      }
    }
  }

  // thesis is determined by the presence of a 502 field.
  LinkedHashSet dissNote = new LinkedHashSet();
  dissNote.addAll(getSubfieldDataAsSet(record, "502", "a", " "));
  if (!dissNote.isEmpty() || dissNote.size() != 0)
    resultSet.add("Thesis");

  // microfilm is determined by 542 subfield h containing "microform"
  LinkedHashSet titleH = new LinkedHashSet();
  titleH.addAll(getSubfieldDataAsSet(record, "245", "h", " "));       
  // check the h subfield of the 245 field
  if (Utils.setItemContains(titleH, "microform"))
    resultSet.add("Microformat");
  // NEXT-619 - Add "Manuscript" facet (in addition to, not instead of, Book)
  if (Utils.setItemContains(titleH, "manuscript"))
    resultSet.add("Manuscript/Archive");


  // if we still don't have a format, it's an "other"
  if ( resultSet.isEmpty() || resultSet.size() == 0 )
    resultSet.add("Other");
  return resultSet;
}

// Format Method  --------------- End   -------------------------- Format Method

