import java.io.*;
import java.text.ParseException;
import java.util.*;
import java.util.regex.Pattern;

import org.marc4j.marc.*;
import org.solrmarc.tools.Utils;  

// import org.marc4j.marc.Record;
// import org.solrmarc.tools.Utils;

// define the base level indexer so that its methods can be called from the script.
// note that the SolrIndexer code will set this value before the script methods are called.
org.solrmarc.index.SolrIndexer indexer = null;

/**
 * returns the sortable publication date from a record, if it is present.
 * 
 * Simplification of StandfordIndexer.java functions (SolrMarc project)
 *  
 * @param record
 * @return String containing publication date, or null if none
 */
public String getPubDateSort(Record record)
{
  // date1 is bytes 7-10 (0 based index) in 008 field
  ControlField cf = (ControlField) record.getVariableField("008");
  if (cf == null)
    return null;

  String marc008 = cf.getData();
  if (marc008.length() < 12)
    return null;

  String dateStr_raw = marc008.substring(7,11);
  String dateStr = dateStr_raw.replace('u', '0');

  Pattern p = Pattern.compile("^\\d{4}$");
  if (! p.matcher(dateStr).matches())
    return null;

  if (dateStr.equals("0000"))
    return null;

  if (dateStr.equals("9999"))
    return null;
  
  return dateStr;
}
