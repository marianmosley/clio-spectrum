-# DISPLAY/CATALOG/SHOW
-# ALL item formats, all catalog-based datasources, use this partial to
-# build their item-detail page.

.show
  -#= render 'show_constraints', :localized_params=>session[:search]
  = render :partial => "_formats/clio/catalog_show_toolbar", :locals => { :document => document }

  .row-fluid
    .title
      %h4= document_heading.listify.join("")

  .row-fluid
    .info.span6
      %span.coins_wrapper
        / COinS
        %span.Z3988{ :title => document.export_as_openurl_ctx_kev(document_partial_name(document)).html_safe }

      = render_document_view(document, :template => "catalog_show", :format => "clio")

      -# NEXT-923 - for all formats, for all data-sources, include a stable
      -# "Bookmark As" link to get back to this record.  Hardcode to prod CLIO URL.
      - bookmark_as_url = "http://clio.columbia.edu/catalog/#{document.id}"
      = add_row('Bookmark As', link_to(bookmark_as_url, bookmark_as_url) )

    -# Database Notes and Alerts
    -# html_safe true, so that ERC can embed HTML links in their alert msgs
    - if document.get("_active_item_alert_count") && document.get("_active_item_alert_count") > 0
      .span6.well
        -# "alert" alerts
        - document.get("_item_alerts")[:alert].each do | alert |
          - if alert.active?
            .span12.alert_alert
              = "ALERT:  #{alert[:message]}".html_safe

        -# "access requirements" alerts
        - document.get("_item_alerts")[:access_requirements].each do | alert |
          - if alert.active?
            = add_row(ItemAlert::ALERT_TYPES['access_requirements'], alert[:message], options = {:html_safe => true})



    .span6.well
      -# this partial renders, in turn, static html for holdings-online,
      -# holdings-display (Voyager), holdings-google, and holdings-hathi
      = render "_formats/clio/catalog_show_holdings", :document => document

    .clear-both
      -# this partial inserts the javascript to fetch book data from Google,
      -# and pass it to update_book_jackets() [defined in holdings.js]
      = render "google_books_check", :documents => document

      - if @active_source == "databases" && can?(:manage, ItemAlert)
        = render "/_formats/database/catalog_manage_alert", :document => document

